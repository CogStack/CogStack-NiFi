#!/usr/bin/env bash

set -e

# required env var files
source ../deploy/general.env
source certificates_general.env
source certificates_nifi.env


NIFI_TOOLKIT_VERSION=${NIFI_VERSION:-"2.4.0"}

if [[ -z "${NIFI_TOOLKIT_VERSION}" ]]; then
    NIFI_TOOLKIT_VERSION=$NIFI_TOOLKIT_VERSION
    echo "NIFI_TOOLKIT_VERSION not set, getting default version, NIFI_TOOLKIT_VERSION=$NIFI_TOOLKIT_VERSION"
else
    NIFI_TOOLKIT_VERSION=${NIFI_TOOLKIT_VERSION}
fi

if [ ! -d "./nifi_toolkit" ]
then
    if [ ! -f ./nifi-toolkit-$NIFI_TOOLKIT_VERSION-bin.zip ]; then
        wget https://archive.apache.org/dist/nifi/$NIFI_TOOLKIT_VERSION/nifi-toolkit-$NIFI_TOOLKIT_VERSION-bin.zip
    fi
    unzip nifi-toolkit-$NIFI_TOOLKIT_VERSION-bin.zip
    mv nifi-toolkit-$NIFI_TOOLKIT_VERSION nifi_toolkit
    rm nifi-toolkit-$NIFI_TOOLKIT_VERSION-bin.zip
fi

# MORE INFO ON THE TOOLKIT : https://nifi.apache.org/docs/nifi-docs/components/nifi-docs/html/toolkit-guide.html#tls_toolkit
# The default value is 1460 days.

if [[ -z "${NIFI_CERTIFICATE_TIME_VAILIDITY_IN_DAYS}" ]]; then
    NIFI_CERTIFICATE_TIME_VAILIDITY_IN_DAYS=1460
    echo "NIFI_CERTIFICATE_TIME_VAILIDITY_IN_DAYS not set, defaulting to NIFI_CERTIFICATE_TIME_VAILIDITY_IN_DAYS=1460"
else
    NIFI_CERTIFICATE_TIME_VAILIDITY_IN_DAYS=${NIFI_CERTIFICATE_TIME_VAILIDITY_IN_DAYS}
fi

# -C,--clientCertDn <arg> Generate client certificate suitable for use in browser with specified DN (Can be specified multiple times)
# this should respect whatever is used to generate the other certificate with regards CN=nifi, this needs to match the HOSTNAME of the nifi container(s)
if [[ -z "${NIFI_SUBJ_LINE_CERTIFICATE_CN}" ]]; then
    NIFI_SUBJ_LINE_CERTIFICATE_CN="CN=cogstack,OU=NIFI,C=UK,ST=UK,L=UK,O=cogstack"
    echo "NIFI_SUBJ_LINE_CERTIFICATE_CN not set, defaulting to NIFI_SUBJ_LINE_CERTIFICATE_CN=CN=cogstack,OU=NIFI,C=UK,ST=UK,L=UK,O=cogstack"
else
    NIFI_SUBJ_LINE_CERTIFICATE_CN=${NIFI_SUBJ_LINE_CERTIFICATE_CN}
fi

if [[ -z "${NIFI_SUBJ_ALT_NAMES}" ]]; then
    NIFI_SUBJ_ALT_NAMES="subjectAltName=IP:127.0.0.1,IP:${IP_ADDRESS:-'127.0.0.1'},DNS:cogstack,DNS:nifi,DNS:localhost,EMAIL:${COGSTACK_ADMIN_EMAIL:-admin@cogstack.net}"
    echo "NIFI_SUBJ_ALT_NAMES not set, defaulting to ${NIFI_SUBJ_ALT_NAMES}"
else
    NIFI_SUBJ_ALT_NAMES=${NIFI_SUBJ_ALT_NAMES}
fi

# IMPRTANT: this is used in StandardSSLContextService controllers on the NiFi side, trusted keystore password field.
if [[ -z "${NIFI_KEYSTORE_PASSWORD}" ]]; then   
    NIFI_KEYSTORE_PASSWORD="cogstackNifi"
    echo "NIFI_KEYSTORE_PASSWORD not set, defaulting to NIFI_KEYSTORE_PASSWORD=cogstackNifi"
fi


# IMPORTANT: ENSURES THAT ONLY THE PASSWORD/KEYSTORE PROPERTIES ARE UPDATED, it takes the original nifi.props and overwrites the password/trustkeystore props with the new ones generated by the tool.
PATH_TO_NIFI_PROPERTIES_FILE="./../nifi/conf/nifi.properties"

# -k, --keySize <arg> Number of bits for generated keys (default: 4096)
KEY_SIZE=4096

# -n, --hostnames <arg> Comma separated list of hostnames i.e "server1,server2,localhost" etc.
HOSTNAMES="nifi,cogstack-nifi,cogstack,nifi-registry"

OUTPUT_DIRECTORY="./nifi_certificates"

# NiFi toolkit platform stuff
os_name=$(echo "$(uname)" | tr '[:upper:]' '[:lower:]')

windows_unames=(msys mingw)

is_os_windows=0

# someties the toolkit may throw an error saying no heap available, this occurs on Windows only
OLD_JAVA_OPTS=${JAVA_OPTS}
export JAVA_OPTS="-Xmx2048m -Xms2048m"

##############################################################################################

echo "Creating a keypair for the NiFi Server: nifi.jks ..."
keytool -genkeypair -alias "nifi" -dname "${NIFI_SUBJ_LINE_CERTIFICATE_CN}" -ext "${NIFI_SUBJ_ALT_NAMES}" -storepass "${NIFI_KEYSTORE_PASSWORD}" -keysize "${KEY_SIZE}" -validity "${NIFI_CERTIFICATE_TIME_VAILIDITY_IN_DAYS}" -sigalg "${NIFI_SIGALG}" -keyalg RSA -keystore nifi.jks -noprompt -v

echo "Create the Certificate Signing Request (.csr)"
keytool -certreq -alias "nifi" -keystore nifi.jks -file nifi.csr  -storepass "${NIFI_KEYSTORE_PASSWORD}" -keysize $KEY_SIZE -keyalg RSA -ext "${NIFI_SUBJ_ALT_NAMES}" -sigalg "${NIFI_SIGALG}"

echo "Export nifi.jks keystore to PKCS12 format"
keytool -importkeystore -srckeystore nifi.jks -destkeystore nifi.p12 -deststoretype PKCS12 -srcalias nifi -destalias nifi -storepass "${NIFI_KEYSTORE_PASSWORD}" -srcstorepass "${NIFI_KEYSTORE_PASSWORD}" -noprompt

echo "Export certificate to .crt format"
keytool -exportcert -alias nifi -keystore nifi.jks -file nifi.crt -storepass "${NIFI_KEYSTORE_PASSWORD}" -srcstorepass "${NIFI_KEYSTORE_PASSWORD}" -noprompt

# Export certificate in Base64/PEM format directly
echo "Convert .crt to .pem format Since keytool exports in DER format by default, convert to PEM" 
keytool -exportcert -keystore nifi.jks -alias nifi -rfc -file nifi.pem  -storepass "${NIFI_KEYSTORE_PASSWORD}" -srcstorepass "${NIFI_KEYSTORE_PASSWORD}" -noprompt

echo "Extract private key as .key file"
openssl pkcs12 -in nifi.p12 -out nifi.key -nodes -passin pass:${NIFI_KEYSTORE_PASSWORD}

echo "Create JKS truststore"
keytool -importcert -keystore nifi-truststore.jks -storetype JKS -alias "nifi" -file nifi.crt -srckeypass "${NIFI_KEYSTORE_PASSWORD}" -deststorepass "${NIFI_KEYSTORE_PASSWORD}" -noprompt


# move the certificates to the nifi_certificates directory
mkdir -p ./nifi_certificates/nifi

mv nifi.key ./nifi_certificates/nifi.key
mv nifi.pem ./nifi_certificates/nifi.pem
mv nifi.jks ./nifi_certificates/nifi-keystore.jks
mv nifi-truststore.jks ./nifi_certificates/nifi-truststore.jks
mv nifi.crt ./nifi_certificates/nifi.crt
mv nifi.csr ./nifi_certificates/nifi.csr
mv nifi.p12 ./nifi_certificates/nifi.p12

# update the nifi.properties file with the new keystore and truststore passwords
sed -i "" "s|nifi\.security\.keystorePasswd=.*|nifi\.security\.keystorePasswd=${NIFI_KEYSTORE_PASSWORD}|" ../nifi/conf/nifi.properties
sed -i "" "s|nifi\.security\.keyPasswd=.*|nifi\.security\.keyPasswd=${NIFI_KEYSTORE_PASSWORD}|" ../nifi/conf/nifi.properties
sed -i "" "s|nifi\.security\.truststorePasswd=.*|nifi\.security\.truststorePasswd=${NIFI_TRUSTSTORE_PASSWORD}|" ../nifi/conf/nifi.properties

# update the nifi-registry.properties file with the new keystore and truststore passwords
sed -i "" "s|nifi\.registry\.security\.keystorePasswd=.*|nifi\.registry\.security\.keystorePasswd=${NIFI_TRUSTSTORE_PASSWORD}|" ../nifi/nifi-registry/conf/nifi-registry.properties
sed -i "" "s|nifi\.registry\.security\.keyPasswd=.*|nifi\.registry\.security\.keyPasswd=${NIFI_TRUSTSTORE_PASSWORD}|" ../nifi/nifi-registry/conf/nifi-registry.properties
sed -i "" "s|nifi\.registry\.security\.truststorePasswd=.*|nifi\.registry\.security\.truststorePasswd=${NIFI_TRUSTSTORE_PASSWORD}|" ../nifi/nifi-registry/conf/nifi-registry.properties

##############################################################################################
# move the new nifi properties files with the updated security configs to the nifi directory
#mv ./$OUTPUT_DIRECTORY/$HOSTNAMES/nifi.properties ../nifi/conf/

##############################################################################################

export JAVA_OPTS=$OLD_JAVA_OPTS
