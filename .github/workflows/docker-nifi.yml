name: docker-nifi

on:
  push:
    branches: ['**']
    tags: ['v*.*.*']
  pull_request:
    branches: ['**']
  release:
    types: [published]
  workflow_dispatch:

concurrency:
  group: docker-nifi-${{ github.ref }}
  cancel-in-progress: true

jobs:

  build:

    runs-on: ${{ matrix.runner }}

    strategy:
      matrix:
        platform: [amd64, arm64]
        include:
          - platform: amd64
            runner: ubuntu-22.04
          - platform: arm64
            runner: ubuntu-22.04-arm
    env:
      working-directory: ./nifi/
    defaults:
      run:
        working-directory: ./nifi/
    outputs:
      digest: ${{ steps.build.outputs.digest }}

    steps:
      - uses: actions/checkout@v5
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: cogstacksystems/cogstack-nifi
          tags: |
            # vX.Y.Z -> X.Y.Z and X.Y (strip leading "v")
            type=semver,pattern={{version}},prefix=v
            type=semver,pattern={{major}}.{{minor}},prefix=v
            # latest on main and on v-tags
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') }}
            # branch tag for non-PR branches
            type=ref,event=branch,enable=${{ github.event_name != 'pull_request' }}
            # short sha
            type=sha,format=short

      - name: Build & push NiFi (${{ matrix.platform }})
        id: push
        uses: docker/build-push-action@v6
        with:
          context: nifi
          file: nifi/Dockerfile
          platforms: linux/${{ matrix.platform }}
          build-args: |
            CPU_ARCHITECTURE=${{ matrix.platform }}
          tags: |
            ${{ steps.meta.outputs.tags }}-${{ matrix.platform }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=nifi-${{ matrix.platform }}
          cache-to: type=gha,mode=max,scope=nifi-${{ matrix.platform }}
          push: ${{ github.event_name != 'pull_request' }}
          provenance: false

  # ---------- manifest merge ----------
  manifest:
    runs-on: ubuntu-22.04
    if: github.event_name != 'pull_request'
    needs: build
    steps:
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Docker meta (again)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: cogstacksystems/cogstack-nifi
          tags: |
            # vX.Y.Z -> X.Y.Z and X.Y (strip leading "v")
            type=semver,pattern={{version}},prefix=v
            type=semver,pattern={{major}}.{{minor}},prefix=v
            # latest on main and on v-tags
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v') }}
            # branch tag for non-PR branches
            type=ref,event=branch,enable=${{ github.event_name != 'pull_request' }}
            # short sha
            type=sha,format=short

      - name: Create multi-arch manifest
        shell: bash
        run: |
          set -euo pipefail
          while IFS= read -r ref; do
            [[ -z "$ref" ]] && continue
            img="${ref%%:*}"
            tag="${ref#*:}"
            echo "ðŸŒ€ Creating manifest for ${img}:${tag}"
            docker buildx imagetools create \
              --tag "${img}:${tag}" \
              "${img}:${tag}-amd64" \
              "${img}:${tag}-arm64"
          done < <(printf "%s" "${{ steps.meta.outputs.tags }}")