name: docker-nifi

on:

  push:
    branches: ['**']
    tags: ['v*.*.*']
  pull_request:
    branches: [ "*" ]
    
  release:
    types: [published]

  workflow_dispatch:

jobs:

  build:

    runs-on: ${{ matrix.runner }}

    strategy:
      matrix:
        platform: [amd64, arm64]
        include:
          - platform: amd64
            runner: ubuntu-22.04
          - platform: arm64
            runner: ubuntu-22.04-arm
    env:
      working-directory: ./nifi/
    defaults:
      run:
        working-directory: ./nifi/
    steps:
      - name: Checkout repo
        uses: actions/checkout@v5

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
          
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: cogstacksystems/cogstack-nifi:latest
      
      - name: Get and Set Release Version
        id: set_release_version
        shell: bash
        run: |
          set -euo pipefail

          REF="${GITHUB_REF}"
          SHORT_SHA="${GITHUB_SHA::7}"

          is_semver_tag=false
          if [[ "$REF" =~ ^refs/tags/v([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            # vMAJOR.MINOR.PATCH -> MAJOR.MINOR.PATCH
            VERSION="${REF#refs/tags/v}"
            is_semver_tag=true
            RELEASE_VERSION="$VERSION"
            IMAGE_TAG="$VERSION"       # you can also add MAJOR.MINOR if you like
            LATEST=true
          elif [[ "$REF" =~ ^refs/tags/ ]]; then
            # some other tag (not semver)
            VERSION="${REF#refs/tags/}"
            RELEASE_VERSION="$VERSION"
            # donâ€™t use latest for non-semver tags
            IMAGE_TAG="$VERSION"
            LATEST=false
          elif [[ "$REF" =~ ^refs/heads/ ]]; then
            BRANCH="${REF#refs/heads/}"
            # sanitize branch -> docker tag (replace / and spaces)
            BRANCH_SAFE="$(echo "$BRANCH" | tr '[:upper:]' '[:lower:]' | sed -E 's#[^a-z0-9._-]+#-#g')"
            RELEASE_VERSION="$BRANCH_SAFE"
            IMAGE_TAG="${BRANCH_SAFE}-${SHORT_SHA}"
            LATEST=false
          else
            RELEASE_VERSION="unknown"
            IMAGE_TAG="unknown-${SHORT_SHA}"
            LATEST=false
          fi

          {
            echo "RELEASE_VERSION=$RELEASE_VERSION"
            echo "IMAGE_TAG=$IMAGE_TAG"
            echo "LATEST=$LATEST"
            echo "IS_SEMVER_TAG=$is_semver_tag"
          } >> "$GITHUB_ENV"

          echo "release_version=$RELEASE_VERSION" >> "$GITHUB_OUTPUT"
          echo "image_tag=$IMAGE_TAG" >> "$GITHUB_OUTPUT"
          echo "latest=$LATEST" >> "$GITHUB_OUTPUT"
          echo "is_semver_tag=$is_semver_tag" >> "$GITHUB_OUTPUT"

      - name: Build and push Docker NiFi image
        id: docker_build
        run: |
          docker build --platform linux/${{ matrix.platform }} -t cogstacksystems/cogstack-nifi:$RELEASE_VERSION-${{ matrix.platform }} -f "./Dockerfile" --build-arg CPU_ARCHITECTURE=${{ matrix.platform }} .
          docker push cogstacksystems/cogstack-nifi:$RELEASE_VERSION-${{ matrix.platform }}
          echo "::set-output name=digest::$(docker images --digests --format '{{.Digest}}' cogstacksystems/nifi-nginx | head -n 1)"

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}