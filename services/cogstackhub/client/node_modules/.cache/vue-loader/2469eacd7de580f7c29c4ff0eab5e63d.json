{"remainingRequest":"/Users/kawsarnoor/Desktop/cogstack/cogstackhub/client/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/kawsarnoor/Desktop/cogstack/cogstackhub/client/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/kawsarnoor/Desktop/cogstack/cogstackhub/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kawsarnoor/Desktop/cogstack/cogstackhub/client/src/pages/Data.vue?vue&type=template&id=3ba2ed64&scoped=true&","dependencies":[{"path":"/Users/kawsarnoor/Desktop/cogstack/cogstackhub/client/src/pages/Data.vue","mtime":1623373238000},{"path":"/Users/kawsarnoor/Desktop/cogstack/cogstackhub/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kawsarnoor/Desktop/cogstack/cogstackhub/client/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/kawsarnoor/Desktop/cogstack/cogstackhub/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kawsarnoor/Desktop/cogstack/cogstackhub/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}