{"remainingRequest":"/Users/kawsarnoor/Desktop/cogstack/cogstackhub/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kawsarnoor/Desktop/cogstack/cogstackhub/client/src/components/DocumentView.vue?vue&type=style&index=0&id=3c04de90&scoped=true&lang=css&","dependencies":[{"path":"/Users/kawsarnoor/Desktop/cogstack/cogstackhub/client/src/components/DocumentView.vue","mtime":1637001508838},{"path":"/Users/kawsarnoor/Desktop/cogstack/cogstackhub/client/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kawsarnoor/Desktop/cogstack/cogstackhub/client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/kawsarnoor/Desktop/cogstack/cogstackhub/client/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/kawsarnoor/Desktop/cogstack/cogstackhub/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kawsarnoor/Desktop/cogstack/cogstackhub/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCiAKZGl2LmNvbnRhaW5lciB7CiAgICAgIG1hcmdpbi10b3A6IDMwcHg7CiAgICB9CmRpdi5jYXJkIHsKICBtYXJnaW4tYm90dG9tOiAxNXB4Owp9CgpzcGFuLmNob3Nlbjpob3ZlciB7CiAgdGV4dC1kZWNvcmF0aW9uOiBub25lOwogIGN1cnNvcjogcG9pbnRlcjsKfQo="},{"version":3,"sources":["DocumentView.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiHA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"DocumentView.vue","sourceRoot":"src/components","sourcesContent":["<template>\n<!-- eslint-disable  -->\n<div>\n    <div class=\"card has-text-left\" v-for=\"(result, id) in searchresults\" :key=\"result._id\">\n        <div class=\"notification is-info is-hidden\" :id=\"'notification_' + id\" >\n          <button class=\"delete\" @click=\"hideDisplayEntity(id)\"></button>\n          <div><strong>Label: </strong> </div>\n          <div>PrettyName: <span :id=\"'displayedprettyname_' + id\" class=\"tag\"></span></div>\n          <div>Concept_Id: <span :id=\"'displayedconceptid_' + id\" class=\"tag\"></span></div>\n          <div>Model_Used: <span :id=\"'displayedmodelid_' + id\" class=\"tag\"></span></div>\n          <div><strong>Meta-tags: </strong></div>\n        </div>\n\n        <header class=\"card-header\">\n          <div class=\"card-header-title\">\n            <div class=\"\" :id=\"'notification_' + id\" >\n              <p><strong>document id: </strong> {{result._id}}</p>\n              <div v-for=\"(meta_field,meta_idx) in meta_data[id]\"> \n                <strong>{{ meta_idx }}: </strong> {{ meta_field }}\n              </div>\n              <div><strong>document level annotations:</strong></div>\n              <span v-for=\"(doc_annotation, doc_annotation_idx) in documentlevelannotations[id]\" style=\"padding-right:5px\"> \n                  <span :id=\"document_index + '_' + doc_annotation_idx\"  class=\"tag is-info chosen is-medium\" @click=\"displayEntity(doc_annotation, id)\">\n                      {{ doc_annotation['nlp_pretty_names'] }}\n                  </span>\n              </span>\n            </div>\n          </div>\n          <a class=\"card-header-icon card-toggle\" @click=\"showDocument(result._id, id)\">\n\t\t\t\t\t  <i class=\"fa fa-angle-down\"></i>\n\t\t\t\t  </a>\n        </header>\n\n        <div class=\"card-content is-hidden\" :id=\"'cardcontent_' + id\">\n          <div class=\"content\" v-if=\"!span_annotations.length\">\n              <span v-for=\"(token,token_idx) in span_annotations[id]\">\n                <span v-bind=\"span_annotations[id]\" v-html=\"result._source['note'].slice(token['start'],token['end'])\" v-if=\"token['annotated']\" :id=\"index + '_' + token_idx\"  class=\"tag is-info chosen is-medium\" @click=\"displayEntity(token, id)\" />\n                <span v-bind=\"span_annotations[id]\" v-html=\"result._source['note'].slice(token['start'],token['end'])\" v-else />{{ ' ' }}\n              </span>\n          </div>\n        </div>\n    </div>\n</div>\n</template>\n\n<script>\n/*eslint-disable*/\nimport axios from 'axios';\n\nexport default {\n  name: 'DocumentView',\n\n  components: {\n  },\n\n  props: {\n      searchresults: [],\n      meta_data: [],\n      documentlevelannotations: [],\n      tokens: [],\n      index: '',\n      test: String,\n  },\n\n  data() {\n    return {\n      root_api: process.env.VUE_APP_URL,\n      span_annotations: {},\n    };\n  },\n\n  methods: {\n\n      displayEntity(token, id) {\n        document.getElementById('displayedprettyname_' + id).innerHTML = token['nlp_pretty_names'];\n        document.getElementById('displayedconceptid_' + id).innerHTML = token['nlp_concept_ids'];\n        document.getElementById('displayedmodelid_' + id).innerHTML = token['nlp_modelids'];\n        document.getElementById('notification_' + id).classList.remove(\"is-hidden\");\n      },\n\n      hideDisplayEntity(id) {\n        document.getElementById('notification_' + id).classList.add(\"is-hidden\");\n      },\n\n      showDocument(document_idx, id) {\n        document.getElementById('cardcontent_' + id).classList.toggle(\"is-hidden\");\n\n        // Retrieve the annotations for this particular document\n\n        let path = 'http://' + this.root_api + ':5001/retrieveAnnotations'\n        axios.post(path, {document_idx:document_idx, index: this.index},\n                  {headers: {'Authorization': localStorage.getItem('jwt')}})\n        .then((res) => {\n            this.span_annotations[id] = res.data.span_annotations;\n            // Vue.set(this.span_annotations, id, res.data.span_annotations)\n            console.log(this.span_annotations)\n            console.log('test')\n        })\n        .catch((error) => {\n            console.error(error);\n        }); \n      }\n\n  },\n\n  created() {\n    console.log(this.tokens)\n  },\n\n};\n</script>\n\n<style scoped > \ndiv.container {\n      margin-top: 30px;\n    }\ndiv.card {\n  margin-bottom: 15px;\n}\n\nspan.chosen:hover {\n  text-decoration: none;\n  cursor: pointer;\n}\n</style>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped > \n\n</style>\n\n"]}]}