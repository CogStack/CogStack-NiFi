{"remainingRequest":"/Users/kawsarnoor/Desktop/cogstack/cogstackhub/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kawsarnoor/Desktop/cogstack/cogstackhub/client/src/views/ModelViewer.vue?vue&type=template&id=6b6ca8d1&","dependencies":[{"path":"/Users/kawsarnoor/Desktop/cogstack/cogstackhub/client/src/views/ModelViewer.vue","mtime":1612770845417},{"path":"/Users/kawsarnoor/Desktop/cogstack/cogstackhub/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kawsarnoor/Desktop/cogstack/cogstackhub/client/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/kawsarnoor/Desktop/cogstack/cogstackhub/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kawsarnoor/Desktop/cogstack/cogstackhub/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjwhLS0gZXNsaW50LWRpc2FibGUgIC0tPgogIDxkaXY+CiAgICA8SGVhZGVyLz4KICAgIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICAgICAgPGRpdiBjbGFzcz0ic2VjdGlvbiI+CiAgICAgICAgICAgIDxwIGNsYXNzPSJ0aXRsZSBpcy0yIj57eyBtb2RlbG5hbWUgfX0gPC9wPgogICAgICAgIDwvZGl2PgoKICAgICAgICA8ZGl2IGNsYXNzPSJ0YWJzIGlzLWNlbnRlcmVkIj4KICAgICAgICA8dWw+CiAgICAgICAgICAgIDxsaSBpZD0nbW9kZWx0YWInIGNsYXNzPSJpcy1hY3RpdmUiPjxhIEBjbGljaz0iZ290b21vZGVsdGFiKCkiPk1vZGVsIEluZm88L2E+PC9saT4KICAgICAgICAgICAgPGxpIGlkPSd1c2Vtb2RlbHRhYic+PGEgQGNsaWNrPSJnb3RvdXNlbW9kZWx0YWIoKSI+VXNlIE1vZGVsPC9hPjwvbGk+CiAgICAgICAgPC91bD4KICAgICAgICA8L2Rpdj4KCiAgICAgICAgPCEtLSB0aGlzIGlzIGZvciB0aGUgbW9kZWwgdGFiICAtLT4KICAgICAgICA8ZGl2IGNsYXNzPSJ0aWxlIGlzLWFuY2VzdG9yIiB2LWlmPSJjdXJyZW50VGFiID09PSAnbW9kZWxpbmZvJyI+CiAgICAgICAgICAgIDxkaXYgY2xhc3M9InRpbGUgaXMtcGFyZW50IGlzLXZlcnRpY2FsIGhhcy10ZXh0LWxlZnQgaXMtNCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJ0aWxlIGlzLWNoaWxkIGJveCBub3RpZmljYXRpb24gaXMtaW5mbyI+CiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InRpdGxlIGlzLTMgaGFzLXRleHQtY2VudGVyZWQiPiAmI3gxRjRCQjsgTW9kZWwgQ2FyZDwvcD4KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGl0bGUgaXMtNSI+PHN0cm9uZz5tb2RlbCB0eXBlOiA8L3N0cm9uZz48L3A+IAogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0aXRsZSBpcy02Ij48Y29kZT57eyBtb2RlbF90eXBlIH19PC9jb2RlPjwvcD4KICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0idGl0bGUgaXMtNSI+PHN0cm9uZz4mI3gxRjQ3NDsgcGFyZW50IG1vZGVsOiA8L3N0cm9uZz48L3A+IAogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0aXRsZSBpcy02IiA+PGNvZGU+e3sgcGFyZW50bmFtZSB9fTwvY29kZT48L3A+CiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InRpdGxlIGlzLTUiPjxzdHJvbmc+dHJhaW5pbmcgZGF0YXNldHM6IDwvc3Ryb25nPjwvcD4KICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIGlzLWJvcmRlcmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgPHRoZWFkPgogICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+PHN0cm9uZz51bnN1cGVydmlzZWQ8L3N0cm9uZz48L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPjxzdHJvbmc+c3VwZXJpdnNlZCA8L3N0cm9uZz48L3RoPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RoZWFkPgogICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48cCBjbGFzcz0idGl0bGUgaXMtNiI+PGNvZGU+e3sgZGF0YXNldHMudW5zdXBlcnZpc2VkIH19PC9jb2RlPjwvcD48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxwIGNsYXNzPSJ0aXRsZSBpcy02Ij48Y29kZT57eyBkYXRhc2V0cy5zdXBlcnZpc2VkIH19PC9jb2RlPjwvcD48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICAgICAgIDwvdGFibGU+CgogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0aXRsZSBpcy01Ij48c3Ryb25nPiAmI3gxRjNDNjsgcGVyZm9ybWFuY2U6IDwvc3Ryb25nPjwvcD4KICAgICAgICAgICAgICAgICAgICA8dGFibGUgY2xhc3M9InRhYmxlIGlzLWJvcmRlcmVkIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0aGVhZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGg+PHN0cm9uZz5mMTwvc3Ryb25nPjwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPjxzdHJvbmc+cHJlY2lzaW9uIDwvc3Ryb25nPjwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPjxzdHJvbmc+cmVjYWxsIDwvc3Ryb25nPjwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3RyPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90aGVhZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0Ym9keT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGQ+PHAgY2xhc3M9InRpdGxlIGlzLTYiPjxjb2RlPnt7IHBlcmZvcm1hbmNlLmYxIH19PC9jb2RlPjwvcD48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48cCBjbGFzcz0idGl0bGUgaXMtNiI+PGNvZGU+e3sgcGVyZm9ybWFuY2UucHJlY2lzaW9uIH19PC9jb2RlPjwvcD48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48cCBjbGFzcz0idGl0bGUgaXMtNiI+PGNvZGU+e3sgcGVyZm9ybWFuY2UucmVjYWxsIH19PC9jb2RlPjwvcD48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGFibGU+CgogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0aXRsZSBpcy01Ij48c3Ryb25nPm9udG9sb2d5OiA8L3N0cm9uZz48L3A+CiAgICAgICAgICAgICAgICAgICAgPHRhYmxlIGNsYXNzPSJ0YWJsZSBpcy1ib3JkZXJlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPjxzdHJvbmc+bmFtZTwvc3Ryb25nPjwvdGg+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRoPjxzdHJvbmc+dmVyc2lvbiA8L3N0cm9uZz48L3RoPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgPC90cj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdGhlYWQ+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dGJvZHk+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8dHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHRkPjxwIGNsYXNzPSJ0aXRsZSBpcy02Ij48Y29kZT57eyBvbnRvbG9neS5uYW1lIH19PC9jb2RlPjwvcD48L3RkPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDx0ZD48cCBjbGFzcz0idGl0bGUgaXMtNiI+PGNvZGU+e3sgb250b2xvZ3kucmVsZWFzZSB9fTwvY29kZT48L3A+PC90ZD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvdHI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L3Rib2R5PgogICAgICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPgoKICAgICAgICAgICAgICAgICAgICA8cD48c3Ryb25nPm1ldGEtbW9kZWxzOiA8L3N0cm9uZz4gPGNvZGU+e3sgbWV0YV9tb2RlbHMgfX08L2NvZGU+PC9wPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICA8IS0tIDxkaXYgY2xhc3M9InRpbGUgaXMtcGFyZW50IGlzLXZlcnRpY2FsIGhhcy10ZXh0LWNlbnRlcmVkIGlzLTQiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGlsZSBpcy1jaGlsZCBib3giPgogICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0aXRsZSBpcy0zIGhhcy10ZXh0LWNlbnRlcmVkIj5BcHBseSBNb2RlbCB0byBEYXRhPC9wPgogICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImZpZWxkIGlzLWdyb3VwZWQiPgogICAgICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz0iY29udHJvbCBpcy1leHBhbmRlZCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8aW5wdXQgY2xhc3M9ImlucHV0IiB0eXBlPSJ0ZXh0IiBwbGFjZWhvbGRlcj0iRmluZCBhIHJlcG9zaXRvcnkiPgogICAgICAgICAgICAgICAgICAgICAgICA8L3A+CiAgICAgICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJjb250cm9sIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJidXR0b24gaXMtaW5mbyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSdW4gTW9kZWwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgPC9wPgogICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgIDwvZGl2PiAtLT4KCiAgICAgICAgICAgIDxkaXYgY2xhc3M9ImNvbnRlbnQiPgogICAgICAgICAgICAgICAgPGgxPkRlc2NyaXB0aW9uPC9oMT4KICAgICAgICAgICAgICAgIDxwPkxvcmVtIGlwc3VtPHN1cD48YT5bMV08L2E+PC9zdXA+IGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ciBhZGlwaXNjaW5nIGVsaXQuIE51bGxhIGFjY3Vtc2FuLCBtZXR1cyB1bHRyaWNlcyBlbGVpZmVuZCBncmF2aWRhLCBudWxsYSBudW5jIHZhcml1cyBsZWN0dXMsIG5lYyBydXRydW0ganVzdG8gbmliaCBldSBsZWN0dXMuIFV0IHZ1bHB1dGF0ZSBzZW1wZXIgZHVpLiBGdXNjZSBlcmF0IG9kaW8sIHNvbGxpY2l0dWRpbiB2ZWwgZXJhdCB2ZWwsIGludGVyZHVtIG1hdHRpcyBuZXF1ZS4gU3ViPHN1Yj5zY3JpcHQ8L3N1Yj4gd29ya3MgYXMgd2VsbCE8L3A+CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgPC9kaXY+CgoKICAgICAgICA8L2Rpdj4KICAgICAgICA8IS0tIHRoaXMgaXMgZm9yIHRoZSBkYXRhIGFwcGxpY2F0aW9uIHRhYiAtLT4KICAgICAgICA8ZGl2PiAKICAgICAgICAgICAgPGRpdiBjbGFzcz0iZmllbGQiPgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY29udHJvbCI+CiAgICAgICAgICAgICAgICAgICAgPGlucHV0IGNsYXNzPSJpbnB1dCBpcy1tZWRpdW0iICBAaW5wdXQ9InNlYXJjaGluZGV4KCkiIHYtbW9kZWw9InNlYXJjaHRleHQiIHR5cGU9InRleHQiIHBsYWNlaG9sZGVyPSJmaW5kIGRhdGFzZXQ+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KPC90ZW1wbGF0ZT4KCjxzY3JpcHQ+Ci8qZXNsaW50LWRpc2FibGUqLwppbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnOwppbXBvcnQgSGVhZGVyIGZyb20gJ0AvY29tcG9uZW50cy9IZWFkZXIudnVlJzsKaW1wb3J0IHJvdXRlciBmcm9tICcuLi9yb3V0ZXInCgpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ01vZGVsVmlld2VyJywKCiAgY29tcG9uZW50czogewogICAgSGVhZGVyLAogIH0sCgoKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgICBtb2RlbG5hbWU6ICcnLAogICAgICAgIHBhcmVudG5hbWU6ICcnLAogICAgICAgIG1vZGVsX3R5cGU6ICcnLAogICAgICAgIGRhdGFzZXRzOiB7J3N1cGVyaXZzZWQnOiAnJywgJ3Vuc3VwZXJ2aXNlZCc6ICcnfSwKICAgICAgICBwZXJmb3JtYW5jZTogeyJmMSI6IiIsICJwcmVjaXNpb24iOiIiLCAicmVjYWxsIjoiIn0sCiAgICAgICAgb250b2xvZ3k6IHsibmFtZSI6IiIsICJyZWxlYXNlIjoiIn0sCiAgICAgICAgbWV0YV9tb2RlbHM6W3t9XSwKICAgICAgICBtb2RlbGlkOiBOdW1iZXIsCiAgICAgICAgY3VycmVudFRhYjogJ21vZGVsaW5mbycsCiAgICAgICAgZGF0YXNlYXJjaHRleHQ6ICcnLAogICAgfTsKICB9LAoKICBtZXRob2RzOiB7CgogICAgICBmZXRjaG1vZGVsY2FyZCgpIHsKICAgICAgICBjb25zdCBwYXRoID0gJ2h0dHA6Ly8xMjcuMC4wLjEnICsgJzo1MDAxL2ZldGNobW9kZWxjYXJkJzsKICAgICAgICBheGlvcy5wb3N0KHBhdGgsIHsnbW9kZWxpZCc6IHRoaXMubW9kZWxpZCwgJ2luZGV4JzogdGhpcy5pbmRleH0sIHtoZWFkZXJzOiB7J0F1dGhvcml6YXRpb24nOiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnand0Jyl9fSkKICAgICAgICAudGhlbigocmVzKSA9PiB7CiAgICAgICAgICAgIHRoaXMubW9kZWxuYW1lID0gcmVzLmRhdGEubW9kZWxjYXJkWyduYW1lJ10KICAgICAgICAgICAgdGhpcy5tb2RlbF90eXBlID0gcmVzLmRhdGEubW9kZWxjYXJkWydtb2RlbCB0eXBlJ10KICAgICAgICAgICAgdGhpcy5wYXJlbnRuYW1lID0gcmVzLmRhdGEubW9kZWxjYXJkWydwYXJlbnQnXQogICAgICAgICAgICB0aGlzLmRhdGFzZXRzID0gcmVzLmRhdGEubW9kZWxjYXJkWydkYXRhc2V0cyddCiAgICAgICAgICAgIHRoaXMucGVyZm9ybWFuY2UgPSByZXMuZGF0YS5tb2RlbGNhcmRbJ3BlcmZvcm1hbmNlJ10KICAgICAgICAgICAgdGhpcy5vbnRvbG9neSA9IHJlcy5kYXRhLm1vZGVsY2FyZFsnb250b2xvZ3knXQogICAgICAgICAgICB0aGlzLm1ldGFfbW9kZWxzID0gcmVzLmRhdGEubW9kZWxjYXJkWydtZXRhIG1vZGVscyddCiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdtb2RlbCBmZXRjaCByZXN1bHQ6ICcsdGhpcy5tb2RlbG5hbWUpCiAgICAgICAgfSkKICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7CiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpOwogICAgICAgIH0pOwogICAgICB9LAoKICAgICAgZ290b21vZGVsdGFiKCkgewogICAgICAgICAgdGhpcy5jdXJyZW50VGFiID0gJ21vZGVsaW5mbyc7CiAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidXNlbW9kZWx0YWIiKS5jbGFzc0xpc3QucmVtb3ZlKCdpcy1hY3RpdmUnKTsKICAgICAgICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtb2RlbHRhYiIpLmNsYXNzTGlzdC5hZGQoJ2lzLWFjdGl2ZScpOwogICAgICB9LAogICAgICBnb3RvdXNlbW9kZWx0YWIoKSB7CiAgICAgICAgICB0aGlzLmN1cnJlbnRUYWIgPSAnbW9kZWx1c2UnOwogICAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoIm1vZGVsdGFiIikuY2xhc3NMaXN0LnJlbW92ZSgnaXMtYWN0aXZlJyk7CiAgICAgICAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgidXNlbW9kZWx0YWIiKS5jbGFzc0xpc3QuYWRkKCdpcy1hY3RpdmUnKTsKICAgICAgfSwKCiAgICAgIHNlYXJjaGluZGljZXMoKSB7CiAgICAgICAgY29uc29sZS5sb2coJ2hpJywgdGhpcy5kYXRhc2VhcmNodGV4dCk7CiAgICAgICAgY29uc3QgcGF0aCA9ICdodHRwOi8vMTI3LjAuMC4xJyArICc6NTAwMS9nZXRlbGFzdGljaW5kaWNlcyc7CgogICAgICAgIGF4aW9zLnBvc3QocGF0aCwgeydzZWFyY2hzdHJpbmcnOiB0aGlzLmRhdGFzZWFyY2h0ZXh0fSwge2hlYWRlcnM6IHsnQXV0aG9yaXphdGlvbic6IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdqd3QnKX19KQogICAgICAgIC50aGVuKChyZXMpID0+IHsKICAgICAgICAgICAgY29uc29sZS5sb2cocmVzLmRhdGEpCiAgICAgICAgICAgIHRoaXMuZWxhc3RpY2luZGljZXMgPSByZXMuZGF0YS5pbmRpY2VzCiAgICAgICAgfSkKICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7CiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpOwogICAgICAgIH0pOwogICAgICB9LAoKICB9LAoKICBjcmVhdGVkKCkgewogICAgdGhpcy5tb2RlbGlkID0gdGhpcy4kcm91dGUucGFyYW1zLm1vZGVsaWQ7CiAgICB0aGlzLmZldGNobW9kZWxjYXJkKCk7CiAgfSwKCn07Cjwvc2NyaXB0PgoKPHN0eWxlIHNjb3BlZD4KZGl2LmNvbnRhaW5lciB7CiAgICAgIG1hcmdpbi10b3A6IDMwcHg7CiAgICB9Cgo8L3N0eWxlPgo="},null]}