version: '3.6'

#---------------------------------------------------------------------------#
# Used services                                                             #
#---------------------------------------------------------------------------#
services:

#---------------------------------------------------------------------------#
# Postgres container with sample data                                       #
#---------------------------------------------------------------------------#
  samples-db:
    image: postgres:15.0-alpine
    container_name: cogstack-samples-db
    shm_size: 128mb
    restart: always
    env_file:
      - ./database.env
      - ../security/database_users.env
    environment:
      # PG env vars
      - POSTGRES_USER=${POSTGRES_USER_SAMPLES:-test}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD_SAMPLES:-test}
    volumes:
      # mapping postgres data dump and initialization
      - ../services/pgsamples/db_dump/db_samples-pdf-text-small.sql.gz:/data/db_samples.sql.gz:ro
      - ../services/cogstack-db/pgsql/schemas/annotations_nlp_create_schema.sql:/data/annotations_nlp_create_schema.sql:ro
      - ../services/pgsamples/init_db.sh:/docker-entrypoint-initdb.d/init_db.sh:ro
      # data persistence
      - samples-vol:/var/lib/postgresql/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    command: postgres -c "max_connections=${POSTGRES_DB_MAX_CONNECTIONS:-100}"
    ports:
    # <host:container> expose the postgres DB to host for debugging purposes
      - 5554:5432
    expose:
      - 5432
    networks:
      - cognet

#---------------------------------------------------------------------------#
# CogStack Databank / Cogstack-DB, production database                      #
#---------------------------------------------------------------------------#
  cogstack-databank-db:
    image: postgres:15.0-alpine
    container_name: cogstack-production-databank-db
    shm_size: 1024mb
    restart: always
    env_file:
      - ./database.env
      - ../security/database_users.env
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-test}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-test}
      - POSTGRES_DATABANK_DB=${POSTGRES_DATABANK_DB:-cogstack}
    volumes:
      # mapping postgres data dump and initialization
      - ../services/cogstack-db/pgsql/schemas:/data/:ro
      - ../services/cogstack-db/pgsql/init_db.sh:/docker-entrypoint-initdb.d/init_db.sh:ro
      # data persistence
      - databank-vol:/var/lib/postgresql/data
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 262144
    command: postgres -c "max_connections=${POSTGRES_DB_MAX_CONNECTIONS:-100}"
    ports:
    # <host:container> expose the postgres DB to host for debugging purposes
      - 5555:5432
    expose:
      - 5432
    networks:
      - cognet
  
  cogstack-databank-db-mssql:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: cogstack-production-databank-db
    shm_size: 1024mb
    restart: always
    env_file:
      - ./database.env
      - ../security/database_users.env
    environment:
      - ACCEPT_EULA=y
      - MSSQL_SA_USER=${MSSQL_SA_USER:-sa}
      - MSSQL_SA_PASSWORD=${MSSQL_SA_USER:-admin!COGSTACK2022}
    volumes:
      # mapping postgres data dump and initialization
      - ../services/cogstack-db/mssql/schemas:/data/:ro
      - ../services/cogstack-db/mssql/init_db.sh:/usr/src/app/init_db.sh:ro
      # data persistence
      - databank-vol:/var/opt/mssql
    entrypoint: "nohup bash -c '/usr/src/app/init_db.sh'"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 262144
    ports:
    # <host:container> expose the postgres DB to host for debugging purposes
      - 2433:1433
    expose:
      - 5432
    networks:
      - cognet


#---------------------------------------------------------------------------#
# Apache Tika documents processing service                                  #
#---------------------------------------------------------------------------#
  tika-service:
    image: cogstacksystems/tika-service:0.5.2
    container_name: cogstack-tika-service
    shm_size: 1024mb
    restart: always
    environment:
      - http_proxy=$HTTP_PROXY
      - https_proxy=$HTTPS_PROXY
      - no_proxy=$no_proxy
      
      # limit the number of processing threads used by tesseract OCR,
      # this should be used with care as processing for smaller documents (i.e < 10mb) is faster when limiting threads as
      # the thread IPC and management does not interfere when using a single thread
      # leave it to 1 if documents are small ( < 10mb) otherwise leave it as it is, changing to 0 will invalidate the variable
      #- OMP_THREAD_LIMIT=1
      #- OMP_NUM_THREADS=1
      - OMP_DYNAMIC=TRUE
      - OMP_NESTED=TRUE

      # This option might be necessary on some systems if there's a java related error thrown
      - JAVA_OPTIONS=-XX:MaxRAMFraction=2 -XX:MinRAMFraction=4
    volumes:
      - ../services/tika-service/config/application.yaml:/app/config/application.yaml:ro
      - ../security/root-ca.p12:/app/config/root-ca.p12:ro
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 262144
    ports:
      - 8090:8090
    expose:
      - 8090
    networks:
      - cognet

#---------------------------------------------------------------------------#
# NLP Services containers                                                   #
#   * using example free models / resources                                 #
#---------------------------------------------------------------------------#
  nlp-medcat-medmen:
    image: cogstacksystems/medcat-service:0.3.2
    container_name: cogstack-medcat-medmen
    restart: always
    # INFO: MedCAT configuration is specified via 'env' files
    env_file:
      - ../services/nlp-services/applications/medcat/config/env_app
      - ../services/nlp-services/applications/medcat/config/env_medcat
    environment:
      - APP_MODEL_NAME=medmen-demo
      - SERVICE_WORKERS=1
    # INFO: MedCAT models are mounted via volumes
    volumes:
      - ../services/nlp-services/applications/medcat/models/:/cat/models/:rw
    expose:
      - 5000
    ports:
      - "5555:5000"
    networks:
      - cognet

  nlp-gate-drugapp:
    image: cogstacksystems/nlp-rest-service-gate:dev-latest
    #build: ../services/nlp-services/applications/drug-app/
    container_name: cogstack-gate-drugapp
    restart: always
    volumes:
      # INFO: CogStack GATE runner configuration files
      - ../services/nlp-services/applications/drug-app/config:/app/nlp-service/config:ro
      - ../services/nlp-services/applications/drug-app/gate:/gate/app/drug-app:ro
    command: "bash /app/nlp-service/run.sh"
    #expose:
    #  - 8095
    ports:
      - "8095:8095"
    networks:
      - cognet

#---------------------------------------------------------------------------#
# NLP Services containers                                                   #
#   * using internal models / resources                                     #
#---------------------------------------------------------------------------#
  nlp-medcat-snomed:
    image: cogstacksystems/medcat-service:0.3.2
    container_name: cogstack-medcat-snomed
    restart: always
    env_file:
      - ../services/nlp-services/applications/medcat/config/env_app
      - ../services/nlp-services/applications/medcat/config/env_medcat
    environment:
      - APP_MODEL_NAME=snomed-mimic
      - RES_MEDCAT_SNOMED_PATH="./"
    volumes:
      - ${RES_MEDCAT_SNOMED_PATH}/cdb.dat:/cat/models/cdb.dat:ro
      - ${RES_MEDCAT_SNOMED_PATH}/vocab.dat:/cat/models/vocab.dat:ro
    expose:
      - 5000
    networks:
      - cognet

  nlp-gate-bioyodie:
    image: cogstacksystems/nlp-rest-service-gate:latest
    container_name: cogstack-gate-bioyodie
    restart: always
    environment:
      - RES_BIOYODIE_UMLS_PATH="./"
    volumes:
      # INFO: CogStack GATE runner configuration files
      - ../services/nlp-services/applications/bio-yodie/config:/app/nlp-service/config:ro
      # TODO: properly set BioYODIE UMLS resources
      - ${RES_BIOYODIE_UMLS_PATH}/:/gate/app/bioyodie/bio-yodie-resources:ro
    #command: "bash /app/nlp-service/run.sh"
    expose:
      - 8095
    networks:
      - cognet


#---------------------------------------------------------------------------#
# MedCAT Trainer                                                            #
#---------------------------------------------------------------------------#
  medcat-trainer-ui:
    image: cogstacksystems/medcat-trainer:v2.3.7
    container_name: cogstack-medcat-trainer-ui
    restart: always
    # INFO: MedCAT library config provided via env file
    env_file:
      - ../services/medcat-trainer/envs/env
    environment:
      - http_proxy=$HTTP_PROXY
      - https_proxy=$HTTPS_PROXY
      - no_proxy=$no_proxy
      - MCT_VERSION=v2.3.7
      - CONCEPT_SEARCH_SERVICE_HOST=mct_solr
      - CONCEPT_SEARCH_SERVICE_PORT=8983
    volumes:
      - ../services/medcat-trainer/configs:/home/configs
      - medcat-api-media:/home/api/media
      - medcat-api-static:/home/api/static
      - medcat-api-db:/home/api/db
    expose:
      - "8000"
    command: /home/run.sh

  medcat-trainer-nginx:
    image: cogstacksystems/medcat-trainer-nginx:v2.3.7
    container_name: cogstack-medcat-trainer-nginx
    restart: always
    environment:
      - http_proxy=$HTTP_PROXY
      - https_proxy=$HTTPS_PROXY
      - no_proxy=$no_proxy
    volumes:
      - ../services/medcat-trainer/nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - medcat-api-media:/home/api/media
      - medcat-api-static:/home/api/static
    ports:
      - "8001:8000"
    depends_on:
      - medcat-trainer-ui

  solr:
    container_name: mct_solr
    image: solr:8
    restart: always
    environment:
      - CONCEPT_SEARCH_SERVICE_HOST=localhost
      - CONCEPT_SEARCH_SERVICE_PORT=8983
    expose:
      - "8983"
    ports:
      - 8983:8983
    volumes:
      - solr-data:/var/solr
    command:
      - -cloud

#---------------------------------------------------------------------------#
# ElasticSearch cluster                                                     #
#---------------------------------------------------------------------------#
  es_native_create_certs:
    container_name: es_create_certs
    image: docker.elastic.co/elasticsearch/elasticsearch:8.3.3
    environment:
      # User config:
      - ELASTIC_USER=${ELASTIC_USER}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - CERTIFICATE_PASSWORD=${CERTIFICATE_PASSWORD}
      - CERTIFICATE_TIME_VAILIDITY_IN_DAYS=${CERTIFICATE_TIME_VAILIDITY_IN_DAYS}
      - HOSTNAMES=${HOSTNAMES}
    command: bash -c "bash /usr/share/elasticsearch/es_native_cert_generator.sh"
    stdin_open: true 
    tty: true
    user: "0"
    working_dir: /usr/share/elasticsearch
    volumes:
      - ../security/es_native_cert_generator.sh:/usr/share/elasticsearch/es_native_cert_generator.sh:ro
      - ../security/es_certificates/es_native:/usr/share/elasticsearch/config/certificates:rw
      - elasticsearch-certs-vol:/certs

  elasticsearch-1:
    image: ${ELASTICSEARCH_DOCKER_IMAGE:-opensearchproject/opensearch:2.3.0}
    container_name: elasticsearch-1
    platform: linux
    shm_size : 1024mb
    restart: always
    # mem_limit: 2g
    env_file:
      - ./elasticsearch.env
      - ../security/elasticsearch_users.env
      - ../security/es_internal_users.env
    environment:
      - http_proxy=$HTTP_PROXY
      - https_proxy=$HTTPS_PROXY
      - no_proxy=$no_proxy
      # CLUSTER CONFIGS
      - node.name=${ELASTICSEARCH_NODE_1_NAME:-es01}
      - cluster.name=${ELASTICSEARCH_CLUSTER_NAME:-"elasticsearch-cogstack-cluster"}
      - discovery.type=zen
      # OTHER SETTINGS
      - bootstrap.memory_lock=${ELASTICSEARCH_BOOTSTRAP_MEMORY_LOCK:-true} 
      - "ES_JAVA_OPTS=${ELASTICSEARCH_JAVA_OPTS:--Xms2048m -Xmx2048m}"
      - "OPENSEARCH_JAVA_OPTS=${ELASTICSEARCH_JAVA_OPTS:--Xms2048m -Xmx2048m}"

      # User config:
      - ELASTIC_USER=${ELASTIC_USER:-elastic}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-kibanaserver}
      - logger.level=${ELASTICSEARCH_LOG_LEVEL:-INFO}

      # global env vars from elasticsearch.env
      - ${ELASTICSEARCH_VERSION:-opensearch}

    volumes:
      # INFO: ES configuration mapped via volume, adaptie with env var
      - ../services/elasticsearch/config/${ELASTICSEARCH_VERSION:-opensearch}.yml:/usr/share/${ELASTICSEARCH_VERSION:-opensearch}/config/${ELASTICSEARCH_VERSION:-opensearch}.yml:ro

      # certificate file mapping, depends on ${ELASTICSEARCH_VERSION:-opensearch} env var
      - ../security/es_certificates/${ELASTICSEARCH_VERSION:-opensearch}/elastic-stack-ca.crt.pem:/usr/share/${ELASTICSEARCH_VERSION:-opensearch}/config/root-ca.crt:ro
      - ../security/es_certificates/${ELASTICSEARCH_VERSION:-opensearch}/elastic-stack-ca.key.pem:/usr/share/${ELASTICSEARCH_VERSION:-opensearch}/config/root-ca.key:ro
      - ../security/es_certificates/${ELASTICSEARCH_VERSION:-opensearch}/elasticsearch/elasticsearch-1/elasticsearch-1.p12:/usr/share/${ELASTICSEARCH_VERSION:-opensearch}/config/esnode.p12:ro
      - ../security/es_certificates/${ELASTICSEARCH_VERSION:-opensearch}/elasticsearch/elasticsearch-1/elasticsearch-1.crt:/usr/share/${ELASTICSEARCH_VERSION:-opensearch}/config/esnode.crt:ro
      - ../security/es_certificates/${ELASTICSEARCH_VERSION:-opensearch}/elasticsearch/elasticsearch-1/elasticsearch-1.key:/usr/share/${ELASTICSEARCH_VERSION:-opensearch}/config/esnode.key:ro

      # OPENSEARCH specific certificates, these are not used in native ES deployments, but they are mounted anyways
      - ../security/es_certificates/opensearch/admin.crt:/usr/share/${ELASTICSEARCH_VERSION:-opensearch}/config/admin.crt:ro
      - ../security/es_certificates/opensearch/admin.key.pem:/usr/share/${ELASTICSEARCH_VERSION:-opensearch}/config/admin.key.pem:ro

      # ES native roles
      - ../security/es_roles/elasticsearch/role_mapping.yml:/usr/share/elasticsearch/config/role_mapping.yml:ro
      - ../security/es_roles/elasticsearch/roles.yml:/usr/share/elasticsearch/config/roles.yml:ro

      # opensearch only
      - ../security/es_roles/opensearch/internal_users.yml:/usr/share/opensearch/plugins/opensearch-security/securityconfig/internal_users.yml:ro
      - ../security/es_roles/opensearch/roles_mapping.yml:/usr/share/opensearch/plugins/opensearch-security/securityconfig/roles_mapping.yml:ro
      - ../security/es_roles/opensearch/roles.yml:/usr/share/opensearch/plugins/opensearch-security/securityconfig/roles.yml:ro

      # VM settings
      - ../services/elasticsearch/sysctl.conf:/etc/sysctl.conf:ro 
     
      # ES data persistence
      - elasticsearch-vol-1:/usr/share/${ELASTICSEARCH_VERSION:-opensearch}/data

    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 262144
    ports:
      - "9200:9200"
      - "9300:9300"
      - "9600:9600" # required for Performance Analyzer
    expose:
      - 9200
      - 9300
      - 9600
    networks:
      - cognet

  elasticsearch-2:
    image: ${ELASTICSEARCH_DOCKER_IMAGE:-opensearchproject/opensearch:2.3.0}
    container_name: elasticsearch-2
    platform: linux
    shm_size : 1024mb
    restart: always
    # mem_limit: 2g
    env_file:
      - ./elasticsearch.env
      - ../security/elasticsearch_users.env
      - ../security/es_internal_users.env
    environment:
      - http_proxy=$HTTP_PROXY
      - https_proxy=$HTTPS_PROXY
      - no_proxy=$no_proxy
      # CLUSTER CONFIGS
      - node.name=${ELASTICSEARCH_NODE_2_NAME:-"es02"}
      - cluster.name=${ELASTICSEARCH_CLUSTER_NAME:-"elasticsearch-cogstack-cluster"}
      - discovery.type=zen
      # OTHER SETTINGS
      - bootstrap.memory_lock=${ELASTICSEARCH_BOOTSTRAP_MEMORY_LOCK:-true} 
      - "ES_JAVA_OPTS=${ELASTICSEARCH_JAVA_OPTS:--Xms2048m -Xmx2048m}"
      - "OPENSEARCH_JAVA_OPTS=${ELASTICSEARCH_JAVA_OPTS:--Xms2048m -Xmx2048m}"

      # User config:
      - ELASTIC_USER=${ELASTIC_USER:-elastic}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-kibanaserver}
      - logger.level=${ELASTICSEARCH_LOG_LEVEL:-INFO}

      # global env vars from elasticsearch.env
      - ${ELASTICSEARCH_VERSION:-opensearch}
      
    volumes:
      # INFO: ES configuration mapped via volume, adaptie with env var
      - ../services/elasticsearch/config/${ELASTICSEARCH_VERSION:-opensearch}.yml:/usr/share/${ELASTICSEARCH_VERSION:-opensearch}/config/${ELASTICSEARCH_VERSION:-opensearch}.yml:ro

      # certificate file mapping, depends on ${ELASTICSEARCH_VERSION:-opensearch} env var
      - ../security/es_certificates/${ELASTICSEARCH_VERSION:-opensearch}/elastic-stack-ca.crt.pem:/usr/share/${ELASTICSEARCH_VERSION:-opensearch}/config/root-ca.crt:ro
      - ../security/es_certificates/${ELASTICSEARCH_VERSION:-opensearch}/elastic-stack-ca.key.pem:/usr/share/${ELASTICSEARCH_VERSION:-opensearch}/config/root-ca.key:ro
      - ../security/es_certificates/${ELASTICSEARCH_VERSION:-opensearch}/elasticsearch/elasticsearch-2/elasticsearch-2.p12:/usr/share/${ELASTICSEARCH_VERSION:-opensearch}/config/esnode.p12:ro
      - ../security/es_certificates/${ELASTICSEARCH_VERSION:-opensearch}/elasticsearch/elasticsearch-2/elasticsearch-2.crt:/usr/share/${ELASTICSEARCH_VERSION:-opensearch}/config/esnode.crt:ro
      - ../security/es_certificates/${ELASTICSEARCH_VERSION:-opensearch}/elasticsearch/elasticsearch-2/elasticsearch-2.key:/usr/share/${ELASTICSEARCH_VERSION:-opensearch}/config/esnode.key:ro

      # OPENSEARCH specific certificates, these are not used in native ES deployments, but they are mounted anyways
      - ../security/es_certificates/opensearch/admin.crt:/usr/share/${ELASTICSEARCH_VERSION:-opensearch}/config/admin.crt:ro
      - ../security/es_certificates/opensearch/admin.key.pem:/usr/share/${ELASTICSEARCH_VERSION:-opensearch}/config/admin.key.pem:ro

      # ES native roles
      - ../security/es_roles/elasticsearch/role_mapping.yml:/usr/share/elasticsearch/config/role_mapping.yml:ro
      - ../security/es_roles/elasticsearch/roles.yml:/usr/share/elasticsearch/config/roles.yml:ro

      # opensearch only
      - ../security/es_roles/opensearch/internal_users.yml:/usr/share/opensearch/plugins/opensearch-security/securityconfig/internal_users.yml:ro
      - ../security/es_roles/opensearch/roles_mapping.yml:/usr/share/opensearch/plugins/opensearch-security/securityconfig/roles_mapping.yml:ro
      - ../security/es_roles/opensearch/roles.yml:/usr/share/opensearch/plugins/opensearch-security/securityconfig/roles.yml:ro

      # VM settings
      - ../services/elasticsearch/sysctl.conf:/etc/sysctl.conf:ro 
     
      # ES data persistence
      - elasticsearch-vol-2:/usr/share/elasticsearch/data
    depends_on:
      - elasticsearch-1
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 262144
    ports:
      - "9201:9200"
      - "9301:9300"
      - "9601:9600" # required for Performance Analyzer
    expose:
      - 9200
      - 9300
      - 9600
    networks:
      - cognet

  metricbeat-1:
    container_name: cogstack-metricbeat-1
    image: docker.elastic.co/beats/metricbeat:8.3.3
    command: -e --strict.perms=false
    env_file:
         - ./elasticsearch.env
         - ../security/es_internal_users.env
    environment:
      - ELASTICSEARCH_HOSTS=${ELASTICSEARCH_HOSTS:-["https://elasticsearch-1:9200", "https://elasticsearch-2:9200"]}
      - ELASTIC_USER=${ELASTIC_USER:-elastic}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-kibanaserver}
      - KIBANA_HOST=${KIBANA_HOST:-"https://kibana:5601"}
    volumes:
      - metricbeat-data-1:/usr/share/metricbeat/data

      - ../services/metricbeat/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro
      # ES NATIVE NODE CERTS
      - ../security/es_certificates/elasticsearch/elastic-stack-ca.crt.pem:/usr/share/metricbeat/root-ca.crt:ro
      - ../security/es_certificates/elasticsearch/elastic-stack-ca.key.pem:/usr/share/metricbeat/root-ca.key:ro 
      - ../security/es_certificates/elasticsearch/elasticsearch/elasticsearch-1/elasticsearch-1.p12:/usr/share/metricbeat/esnode.p12:ro
      - ../security/es_certificates/elasticsearch/elasticsearch/elasticsearch-1/elasticsearch-1.crt:/usr/share/metricbeat/esnode.crt:ro
      - ../security/es_certificates/elasticsearch/elasticsearch/elasticsearch-1/elasticsearch-1.key:/usr/share/metricbeat/esnode.key:ro

    networks:
      - cognet
    depends_on:
      - elasticsearch-1

  metricbeat-2:
    container_name: cogstack-metricbeat-2
    image: docker.elastic.co/beats/metricbeat:8.3.3
    command: -e --strict.perms=false
    env_file:
      - ./elasticsearch.env
      - ../security/es_internal_users.env
    environment:
      - ELASTICSEARCH_HOSTS=${ELASTICSEARCH_HOSTS:-["https://elasticsearch-1:9200", "https://elasticsearch-2:9200"]}
      - ELASTIC_USER=${ELASTIC_USER:-elastic}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD:-kibanaserver}
      - KIBANA_HOST=${KIBANA_HOST:-"https://kibana:5601"}
    volumes:
      - metricbeat-data-2:/usr/share/metricbeat/data

      - ../services/metricbeat/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro
      # ES NATIVE NODE CERTS
      - ../security/es_certificates/elasticsearch/elastic-stack-ca.crt.pem:/usr/share/metricbeat/root-ca.crt:ro
      - ../security/es_certificates/elasticsearch/elastic-stack-ca.key.pem:/usr/share/metricbeat/root-ca.key:ro
      - ../security/es_certificates/elasticsearch/elasticsearch/elasticsearch-2/elasticsearch-2.p12:/usr/share/metricbeat/esnode.p12:ro
      - ../security/es_certificates/elasticsearch/elasticsearch/elasticsearch-2/elasticsearch-2.crt:/usr/share/metricbeat/esnode.crt:ro
      - ../security/es_certificates/elasticsearch/elasticsearch/elasticsearch-2/elasticsearch-2.key:/usr/share/metricbeat/esnode.key:ro
    networks:
      - cognet
    depends_on:
      - elasticsearch-2

#---------------------------------------------------------------------------#
# Kibana webapp                                                             #
#---------------------------------------------------------------------------#
  kibana:
    image: ${ELASTICSEARCH_KIBANA_DOCKER_IMAGE:-opensearchproject/opensearch-dashboards:2.3.0}
    container_name: cogstack-kibana
    restart: always
    env_file:
         - ../security/elasticsearch_users.env
         - ./elasticsearch.env
    environment:
      # INFO: use HTTPS instead of HTTP when enabled SSL
      OPENSEARCH_HOSTS: ${ELASTICSEARCH_HOSTS:-["https://elasticsearch-1:9200","https://elasticsearch-2:9200"]}
      ELASTICSEARCH_HOSTS: ${ELASTICSEARCH_HOSTS:-["https://elasticsearch-1:9200","https://elasticsearch-2:9200"]}
      # INFO: uncomment below to enable SSL keys
      SERVER_SSL_ENABLED: ${ELASTICSEARCH_SSL_ENABLED:-"true"}

    depends_on:
      - elasticsearch-1
    volumes:
      # INFO: Kibana configuration mapped via volume (make sure to comment this and uncomment the next line if you are using NATIVE kibana deployment)
      - ../services/kibana/config/${ELASTICSEARCH_VERSION:-opensearch}.yml:/usr/share/${KIBANA_VERSION:-opensearch-dashboards}/config/${KIBANA_CONFIG_FILE_VERSION:-opensearch_dashboards}.yml:ro

      # Security certificates, general      
      - ../security/es_certificates/${ELASTICSEARCH_VERSION:-opensearch}/elastic-stack-ca.crt.pem:/usr/share/${KIBANA_VERSION:-opensearch-dashboards}/config/root-ca.crt:ro
      - ../security/es_certificates/${ELASTICSEARCH_VERSION:-opensearch}/elastic-stack-ca.key.pem:/usr/share/${KIBANA_VERSION:-opensearch-dashboards}/config/root-ca.key:ro
      - ../security/es_certificates/${ELASTICSEARCH_VERSION:-opensearch}/elasticsearch/elasticsearch-1/elasticsearch-1.crt:/usr/share/${KIBANA_VERSION:-opensearch-dashboards}/config/esnode1.crt:ro
      - ../security/es_certificates/${ELASTICSEARCH_VERSION:-opensearch}/elasticsearch/elasticsearch-2/elasticsearch-2.crt:/usr/share/${KIBANA_VERSION:-opensearch-dashboards}/config/esnode2.crt:ro
      - ../security/es_certificates/${ELASTICSEARCH_VERSION:-opensearch}/elasticsearch/elasticsearch-1/elasticsearch-1.key:/usr/share/${KIBANA_VERSION:-opensearch-dashboards}/config/esnode1.key:ro
      - ../security/es_certificates/${ELASTICSEARCH_VERSION:-opensearch}/elasticsearch/elasticsearch-2/elasticsearch-2.key:/usr/share/${KIBANA_VERSION:-opensearch-dashboards}/config/esnode2.key:ro

      # OpenSearch only certs
      - ../security/es_certificates/opensearch/admin.crt:/usr/share/opensearch-dashboards/config/admin.crt:ro
      - ../security/es_certificates/opensearch/admin.key.pem:/usr/share/opensearch-dashboards/config/admin.key.pem:ro
      - ../security/es_certificates/opensearch/es_kibana_client.pem:/usr/share/opensearch-dashboards/config/kibana.pem:ro
      - ../security/es_certificates/opensearch/es_kibana_client.key:/usr/share/opensearch-dashboards/config/kibana.key:ro

    ports:
      - "5601:5601"
    networks:
      - cognet


#---------------------------------------------------------------------------#
# NiFi webapp                                                               #
#---------------------------------------------------------------------------#
  nifi:
    image: cogstacksystems/cogstack-nifi:latest
    #build:
    #   context: ../nifi/
    #   args:      
    #       HTTP_PROXY: $HTTP_PROXY
    #       HTTPS_PROXY: $HTTPS_PROXY
    #       no_proxy: $no_proxy
    container_name: cogstack-nifi
    restart: always
    env_file:
      - ./nifi.env
    shm_size: 1024mb
    environment:
      - http_proxy=$HTTP_PROXY
      - https_proxy=$HTTPS_PROXY
      - no_proxy=$no_proxy
      - USER_ID=1000
      - GROUP_ID=1000
      - NIFI_WEB_PROXY_HOST=${NIFI_WEB_PROXY_HOST:-"0.0.0.0:8443,cogstack:8443,nifi:8443"}
      - NIFI_WEB_PROXY_CONTEXT_PATH=${NIFI_WEB_PROXY_CONTEXT_PATH:-"/,/nifi,/nifi-api,/nifi-api/,/nifi/"}
      - NIFI_INTERNAL_PORT=${NIFI_INTERNAL_PORT:-8443}
      - NIFI_OUTPUT_PORT=${NIFI_OUTPUT_PORT:-8082}
      - NIFI_INPUT_SOCKET_PORT=${NIFI_INPUT_SOCKET_PORT:-10000}
    volumes:
      # INFO: mapping custom development directory
      - ../nifi/devel:/opt/nifi/devel
      
      # INFO: if there are  local changes, map these content from local host to container
      #       (normally, these 3 directories  below are bundled with our NiFi image)
      # N.B. The container user may not have the permission to read these directories/files.
      - ../nifi/user-templates:/opt/nifi/nifi-current/conf/templates:rw
      - ../nifi/user-scripts:/opt/nifi/user-scripts:rw
      - ../nifi/user-schemas:/opt/nifi/user-schemas:rw
      
      # INFO: uncomment below to map security certificates if need to secure NiFi endpoints 
      - ${NIFI_SECURITY_DIR:-../security/nifi_certificates}:/opt/nifi/security:ro
      - ../security/nifi_certificates/localhost/keystore.jks:/opt/nifi/nifi-current/conf/keystore.jks
      - ../security/nifi_certificates/localhost/truststore.jks:/opt/nifi/nifi-current/conf/truststore.jks
      - ${ELASTICSEARCH_SECURITY_DIR:-../security/es_certificates}:/opt/nifi/nifi-current/es_certificates:ro

      # # Nifi properties file:
      - ../nifi/conf/:/opt/nifi/nifi-current/conf/:rw
         
      # rest of volumes to persist the state
      - nifi-vol-logs:/opt/nifi/nifi-current/logs
      - nifi-vol-provenance:/opt/nifi/nifi-current/provenance_repository
      - nifi-vol-database:/opt/nifi/nifi-current/database_repository
      - nifi-vol-flowfiles:/opt/nifi/nifi-current/flowfile_repository
      - nifi-vol-content:/opt/nifi/nifi-current/content_repository
      # errors generated during data processing
      - nifi-vol-errors:/opt/nifi/pipeline/flowfile-errors
      
      # logs
      - ../nifi/nifi-app.log:/opt/nifi/nifi-current/logs/nifi-app.log:rw

    user: "${USER_ID:-1000}:${GROUP_ID:-1000}"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 262144

    # INFO : Uncomment the below line to generate your own USERNAME and PASSWORD,
    #        a bit messy this way as you will need to copy the credentials back
    #        to the "login-identity-providers.xml" section.
    # entrypoint: bash -c "/opt/nifi/nifi-current/bin/nifi.sh set-single-user-credentials admin admincogstacknifi"
   
    tty: true
    ports:
      - "${NIFI_OUTPUT_PORT:-8082}:${NIFI_INTERNAL_PORT:-8443}"
    expose:
      - "${NIFI_INTERNAL_PORT:-8443}"
      - "${NIFI_INPUT_SOCKET_PORT:-10000}"
    networks:
      - cognet

  nifi-nginx:
    build:  ../services/nginx/
    container_name: cogstack-nifi-nginx
    restart: always
    environment:
      - http_proxy=$HTTP_PROXY
      - https_proxy=$HTTPS_PROXY
      - no_proxy=$no_proxy
    volumes:
      - ../services/nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ../services/nginx/config/nginx.conf:/etc/nginx/nginx.conf:rw
      - ../security/root-ca.pem:/etc/nginx/root-ca.pem:ro
      - ../security/root-ca.key:/etc/nginx/root-ca.key:ro
      - ../security/nifi_certificates/nifi-cert.pem:/etc/nginx/nifi-cert.pem:ro
      - ../security/nifi_certificates/nifi-key.key:/etc/nginx/nifi-key.key:ro
    ports:
      - "8443:8443"
    networks:
      - cognet

#---------------------------------------------------------------------------#
# Jupyter Hub                                                               #
#---------------------------------------------------------------------------#
  jupyter-hub:
    image: cogstacksystems/jupyter-hub:latest
    #build:
    #  context: ../services/jupyter-hub/
    #  args:
    #    - http_proxy=$HTTP_PROXY
    #    - https_proxy=$HTTPS_PROXY
    #    - no_proxy=$no_proxy
    container_name: cogstack-jupyter-hub
    restart: always
    platform: linux
    env_file:
      - ./jupyter.env
    environment:
      - http_proxy=$HTTP_PROXY
      - https_proxy=$HTTPS_PROXY
      - no_proxy=$NO_PROXY
      - JUPYTERHUB_INTERNAL_PORT=${JUPYTERHUB_INTERNAL_PORT:-8888}
      - JUPYTERHUB_INTERNAL_PROXY_API_PORT=${JUPYTERHUB_INTERNAL_PROXY_API_PORT:-8887}
      - JUPYTERHUB_SSL_PORT=${JUPYTERHUB_SSL_PORT:-443}
    volumes:
      - jupyter-hub-shared-scratch:/home/jovyan/scratch
      - jupyter-hub-vol:/etc/jupyterhub
      # Security configs
      - ../security/root-ca.key:/etc/jupyterhub/root-ca.key:ro
      - ../security/root-ca.pem:/etc/jupyterhub/root-ca.pem:ro
      - ../services/jupyter-hub/config/jupyterhub_cookie_secret:/etc/jupyterhub/jupyterhub_cookie_secret:ro
      # User list and jupyter config
      - ../services/jupyter-hub/config/jupyterhub_config.py:/etc/jupyterhub/jupyterhub_config.py:ro
      - ../services/jupyter-hub/config/userlist:/etc/jupyterhub/userlist:rw
      - ../services/jupyter-hub/config/teamlist:/etc/jupyterhub/teamlist:rw
      # Give access to Docker socket
      - /var/run/docker.sock:/var/run/docker.sock
    command: sh -c "jupyterhub -f /etc/jupyterhub/jupyterhub_config.py"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    ports:
      - "${JUPYTERHUB_INTERNAL_PORT:-8888}:${JUPYTERHUB_SSL_PORT:-443}"
    networks:
      - cognet

#---------------------------------------------------------------------------#
# Annotation ingester service                                               #
#---------------------------------------------------------------------------#
  annotation-ingester:
     image: cogstacksystems/annotations-ingester:latest
     shm_size : 128mb
     restart: always
     environment:
       - http_proxy=$HTTP_PROXY
       - https_proxy=$HTTPS_PROXY
       - no_proxy=$no_proxy
     volumes:
       - ../services/annotation_ingester/config/config.yml:/app/config/config.yml:ro
     command: "/app/run.sh"
     networks:
      - cognet
    

#---------------------------------------------------------------------------#
# Docker named volumes                                                      #
#---------------------------------------------------------------------------#
volumes:
  samples-vol:
    driver: local

  databank-vol:
    driver: local

  # ELK-stack related
  elasticsearch-vol-1:
    driver: local
  elasticsearch-vol-2:
    driver: local
  elasticsearch-certs-vol:
    driver: local
  
  metricbeat-data-1:
    driver: local
  metricbeat-data-2:
    driver: local

  # NiFi related
  nifi-vol-conf:
    driver: local

  nifi-vol-logs:
    driver: local

  nifi-vol-provenance:
    driver: local

  nifi-vol-database:
    driver: local

  nifi-vol-flowfiles:
    driver: local

  nifi-vol-content:
    driver: local

  nifi-vol-errors:
    driver: local

  # MedCAT Trainer
  medcat-api-media:
    driver: local
  medcat-api-static:
    driver: local
  medcat-api-db:
    driver: local
  solr-data:
    driver: local

  # Jupyter Hub
  jupyter-hub-vol:
    driver: local
  jupyter-hub-shared-scratch:
    driver: local
#---------------------------------------------------------------------------#
# Docker networks.                                                          #
#---------------------------------------------------------------------------#
networks:
  cognet:
    name: cogstack-net
