#---------------------------------------------------------------------------#
# Used services                                                             #
#---------------------------------------------------------------------------#
services:

#---------------------------------------------------------------------------#
# NiFi webapp                                                               #
#---------------------------------------------------------------------------#
  nifi:
    # image: cogstacksystems/cogstack-nifi:latest-${CPU_ARCHITECTURE:-amd64}
    build:
       context: ../nifi/
       args:
           HTTP_PROXY: $HTTP_PROXY
           HTTPS_PROXY: $HTTPS_PROXY
           no_proxy: $no_proxy
    container_name: cogstack-nifi
    hostname: nifi
    restart: always
    env_file:
      - ./general.env
      - ./project.env
      - ./nifi.env
      - ./elasticsearch.env
      - ./network_settings.env
      - ../security/users_nifi.env
      - ../security/users_elasticsearch.env
      - ../security/certificates_general.env
      - ../security/certificates_elasticsearch.env
      - ../security/certificates_nifi.env
    shm_size: 1024mb
    environment:
      - USER_ID=${NIFI_UID:-1000}
      - GROUP_ID=${NIFI_GID:-1000}
      - NIFI_WEB_PROXY_HOST=${NIFI_WEB_PROXY_HOST:-"localhost:8443"}
      - NIFI_WEB_PROXY_CONTEXT_PATH=${NIFI_WEB_PROXY_CONTEXT_PATH:-"/nifi"}
      - NIFI_INTERNAL_PORT=${NIFI_INTERNAL_PORT:-8443}
      - NIFI_OUTPUT_PORT=${NIFI_OUTPUT_PORT:-8082}
      - NIFI_INPUT_SOCKET_PORT=${NIFI_INPUT_SOCKET_PORT:-10000}
      - NIFI_SECURITY_DIR=${NIFI_SECURITY_DIR:-../security/nifi_certificates/}
      - ELASTICSEARCH_SECURITY_DIR=${ELASTICSEARCH_SECURITY_DIR:-../security/es_certificates/}
    volumes:
      # INFO: mapping custom development directory
      - ../nifi/devel:/opt/nifi/devel

      # INFO: drivers folder
      - ../nifi/drivers:/opt/nifi/drivers
      
      # INFO: if there are  local changes, map these content from local host to container
      #       (normally, these 3 directories  below are bundled with our NiFi image)
      # N.B. The container user may not have the permission to read these directories/files.
      - ../nifi/user-templates:/opt/nifi/nifi-current/conf/templates:rw
      - ../nifi/user-scripts:/opt/nifi/user-scripts:rw
      - ../nifi/user-schemas:/opt/nifi/user-schemas:rw

      # this is a direct mapping to where we store the NiFi python processors as of NiFi 2.0.x
      - ../nifi/user-python-extensions:/opt/nifi/nifi-current/python_extensions:rw
      
      # INFO: uncomment below to map security certificates if need to secure NiFi endpoints 
      - ./${NIFI_SECURITY_DIR:-../security/nifi_certificates/}:/opt/nifi/nifi-current/nifi_certificates:ro
      - ./${ELASTICSEARCH_SECURITY_DIR:-../security/es_certificates/}:/opt/nifi/nifi-current/es_certificates:ro
      - ./${NIFI_SECURITY_DIR:-../security/nifi_certificates/}nifi-keystore.jks:/opt/nifi/nifi-current/conf/keystore.jks
      - ./${NIFI_SECURITY_DIR:-../security/nifi_certificates/}nifi-truststore.jks:/opt/nifi/nifi-current/conf/truststore.jks
  
      # Security credentials scripts
      - ../security/nifi_create_single_user_auth.sh:/opt/nifi/nifi-current/security_scripts/nifi_create_single_user_auth.sh:ro

      # # Nifi properties file:
      - ../nifi/conf/:/opt/nifi/nifi-current/conf/:rw

      # this is where you should place data to be ingested, under the form of symbolic
      - ./${NIFI_DATA_PATH:-../data/}:/opt/data/:rw

      # DB-schemas, from the services folder
      - ../services/cogstack-db/:/opt/cogstack-db/:rw

      # medcat models
      - ./${RES_MEDCAT_SERVICE_MODEL_PRODUCTION_PATH:-../services/nlp-services/medcat-service/models/}:/opt/models:rw

      # rest of volumes to persist the state
      - nifi-vol-logs:/opt/nifi/nifi-current/logs
      - nifi-vol-provenance:/opt/nifi/nifi-current/provenance_repository
      - nifi-vol-database:/opt/nifi/nifi-current/database_repository
      - nifi-vol-flowfiles:/opt/nifi/nifi-current/flowfile_repository
      - nifi-vol-content:/opt/nifi/nifi-current/content_repository
      - nifi-vol-state:/opt/nifi/nifi-current/state

      # errors generated during data processing
      - nifi-vol-errors:/opt/nifi/pipeline/flowfile-errors

    extra_hosts:
      - ${ELASTICSEARCH_1_HOST_NAME:-test-1:0.0.0.0}
      - ${ELASTICSEARCH_2_HOST_NAME:-test-2:0.0.0.0}
      - ${ELASTICSEARCH_3_HOST_NAME:-test-3:0.0.0.0}
      - ${KIBANA_HOST_NAME:-test-4:0.0.0.0}
      - ${NIFI_HOST_NAME:-test-5:0.0.0.0}
      - ${NIFI_REGISTRY_HOST_NAME:-test-6:0.0.0.0}

    # user: "${NIFI_UID:-1000}:${NIFI_GID:-1000}"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 262144

    # INFO : Uncomment the below line to generate your own USERNAME and PASSWORD,
    #        a bit messy this way as you will need to copy the credentials back
    #        to the "login-identity-providers.xml" section.
    # entrypoint: bash -c "/opt/nifi/nifi-current/bin/nifi.sh set-single-user-credentials admin admincogstacknifi"
   
    tty: true
    ports:
      - "${NIFI_OUTPUT_PORT:-8082}:${NIFI_INTERNAL_PORT:-8443}"
      - "${NIFI_INPUT_SOCKET_PORT:-10000}"
    networks:
      - cognet

  nifi-registry-flow:
    image: apache/nifi-registry:${NIFI_REGISTRY_VERSION:-2.5.0}
    hostname: nifi-registry
    container_name: cogstack-nifi-registry-flow
    restart: always
    user: root
    env_file:
      - ./general.env
      - ./network_settings.env
      - ./nifi.env
      - ./project.env
      - ../security/users_nifi.env
      - ../security/users_elasticsearch.env
      - ../security/certificates_general.env
      - ../security/certificates_elasticsearch.env
      - ../security/certificates_nifi.env
    environment:
      - http_proxy=$HTTP_PROXY
      - https_proxy=$HTTPS_PROXY
      - no_proxy=$no_proxy
      - USER_ID=${NIFI_UID:-1000}
      - GROUP_ID=${NIFI_GID:-1000}
      - KEYSTORE_PATH=${NIFI_REGISTRY_KEYSTORE_PATH:-./conf/keystore.jks}
      - KEYSTORE_TYPE=${NIFI_KEYSTORE_TYPE:-jks}
      - KEYSTORE_PASSWORD=${NIFI_KEYSTORE_PASSWORD:-"cogstackNifi"}
      - TRUSTSTORE_PASSWORD=${NIFI_TRUSTSTORE_PASSWORD:-"cogstackNifi"}
      - TRUSTSTORE_PATH=${NIFI_REGISTRY_TRUSTSTORE_PATH:-./conf/truststore.jks}

      - TRUSTSTORE_TYPE=${NIFI_TRUSTSTORE_TYPE:-jks}
      - INITIAL_ADMIN_IDENTITY=${NIFI_INITIAL_ADMIN_IDENTITY:-"CN=admin, OU=nifi"}
      - AUTH=${NIFI_AUTH:-"tls"}
      - NIFI_REGISTRY_DB_DIR=${NIFI_REGISTRY_DB_DIR:-/opt/nifi-registry/nifi-registry-current/database}
      #- NIFI_REGISTRY_FLOW_PROVIDER=${NIFI_REGISTRY_FLOW_PROVIDER:-file}
      - NIFI_REGISTRY_FLOW_STORAGE_DIR=${NIFI_REGISTRY_FLOW_STORAGE_DIR:-/opt/nifi-registry/nifi-registry-current/flow_storage}
    volumes:
      - ../nifi/nifi-registry/:/opt/nifi-registry/nifi-registry-current/conf/:rw
      - ./${NIFI_SECURITY_DIR:-../security/nifi_certificates/}nifi-keystore.jks:/opt/nifi-registry/nifi-registry-current/conf/keystore.jks:ro
      - ./${NIFI_SECURITY_DIR:-../security/nifi_certificates/}nifi-truststore.jks://opt/nifi-registry/nifi-registry-current/conf/truststore.jks:ro
      - nifi-registry-vol-database:/opt/nifi-registry/nifi-registry-current/database
      - nifi-registry-vol-flow-storage:/opt/nifi-registry/nifi-registry-current/flow_storage
      - nifi-registry-vol-work:/opt/nifi-registry/nifi-registry-current/work
      - nifi-registry-vol-logs:/opt/nifi-registry/nifi-registry-current/logs
    extra_hosts:
      - ${NIFI_HOST_NAME:-test-5:0.0.0.0}
      - ${NIFI_REGISTRY_HOST_NAME:-test-6:0.0.0.0}

    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 262144

    tty: true
    ports:
      - "${NIFI_REGISTRY_FLOW_OUTPUT_PORT:-8083}:${NIFI_REGISTRY_FLOW_INPUT_PORT:-18443}"
    
    entrypoint: bash -c "chown -R nifi:nifi /opt/nifi-registry/nifi-registry-current/database && \
      chown -R nifi:nifi /opt/nifi-registry/nifi-registry-current/flow_storage && \
      chown -R nifi:nifi /opt/nifi-registry/nifi-registry-current/work && \
      chown -R nifi:nifi /opt/nifi-registry/nifi-registry-current/logs && \
      bash /opt/nifi-registry/scripts/start.sh"

    networks:
      - cognet

  nifi-nginx:
    # image: cogstacksystems/nifi-nginx:latest-${CPU_ARCHITECTURE:-amd64}
    build:
       context: ../services/nginx/
       args:
           HTTP_PROXY: $HTTP_PROXY
           HTTPS_PROXY: $HTTPS_PROXY
           no_proxy: $no_proxy
    container_name: cogstack-nifi-nginx
    restart: always
    env_file:
      - ./network_settings.env
      - ./nginx.env
      - ./nifi.env
      - ./elasticsearch.env
      - ./project.env
      - ./nlp_service.env
    volumes:
      - ../services/nginx/sites-enabled:/etc/nginx/sites-enabled:ro
      - ../services/nginx/config/nginx.conf.template:/etc/nginx/config/nginx.conf.template:rw
      - ../services/nginx/config/nginx.conf:/etc/nginx/nginx.conf:rw
      - ../security/root_certificates:/etc/nginx/root_certificates:ro
      - ../security/nifi_certificates:/etc/nginx/nifi_certificates:ro

      - ../security/es_certificates/${ELASTICSEARCH_VERSION:-opensearch}/elastic-stack-ca.crt.pem:/etc/nginx/es_certificates/elastic-stack-ca.crt.pem:ro
      - ../security/es_certificates/${ELASTICSEARCH_VERSION:-opensearch}/elastic-stack-ca.key.pem:/etc/nginx/es_certificates/elastic-stack-ca.key.pem:ro
      # - ../security/es_certificates/:/etc/nginx/es_certificates/:ro
    ports:
      - "${NIFI_EXTERNAL_PORT_NGINX:-8443}:${NIFI_INTERNAL_PORT_NGINX:-8443}"
      - "${NIFI_REGISTRY_EXTERNAL_PORT_NGINX:-18443}:${NIFI_REGISTRY_INTERNAL_PORT_NGINX:-18443}"
    networks:
      - cognet
    command: /bin/bash -c "envsubst < /etc/nginx/config/nginx.conf.template > /etc/nginx/config/nginx.conf && nginx -g 'daemon off;'"

#---------------------------------------------------------------------------#
# Docker named volumes                                                      #
#---------------------------------------------------------------------------#
volumes:
  # NiFi related
  nifi-vol-logs:
    driver: local

  nifi-vol-provenance:
    driver: local

  nifi-vol-database:
    driver: local

  nifi-vol-flowfiles:
    driver: local

  nifi-vol-content:
    driver: local
  
  nifi-vol-state:
    driver: local

  nifi-vol-errors:
    driver: local

  nifi-registry-vol-database:
    driver: local
  nifi-registry-vol-flow-storage:
    driver: local
  nifi-registry-vol-work:
    driver: local
  nifi-registry-vol-logs:
    driver: local

#---------------------------------------------------------------------------#
# Docker networks.                                                          #
#---------------------------------------------------------------------------#
networks:
  cognet:
    driver: bridge
    name: cogstack-net
